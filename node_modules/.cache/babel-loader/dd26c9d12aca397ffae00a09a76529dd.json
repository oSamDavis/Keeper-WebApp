{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\Keeper-WebApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\Keeper-WebApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\Keeper-WebApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import AddIcon from\"@material-ui/icons/Add\";import Fab from\"@material-ui/core/Fab\";import Zoom from\"@material-ui/core/Zoom\";function CreateArea(props){// useState returns two things in an array:\n// the state and a function to setState\nvar _useState=useState({title:\"\",content:\"\"}),_useState2=_slicedToArray(_useState,2),note=_useState2[0],setNote=_useState2[1];//tracking the state of typing in the text content for UX rendering\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),typing=_useState4[0],setTyping=_useState4[1];// function to display title field, will only be called if the user is typing a content\nvar showTitle=function showTitle(){return/*#__PURE__*/React.createElement(\"input\",{onChange:handleChange,name:\"title\",placeholder:\"Title\",value:note.title});};// function to handle change event in input and textarea fields\nvar handleChange=function handleChange(event){// get the name and new value by destructuring\n// the element that triggered the event\nvar _event$target=event.target,name=_event$target.name,value=_event$target.value;// use the setNote state function to update\n// the note object. Spread operator is used to get\n// previous object content and we update based on name of event\nsetNote(function(prevValue){return _objectSpread(_objectSpread({},prevValue),{},_defineProperty({},name,value));});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"form\",{className:\"create-note\"},typing?showTitle():null,/*#__PURE__*/React.createElement(\"textarea\",{onClick:function onClick(){// setting typing flag to true when text area gets clicked\nsetTyping(true);},onChange:handleChange,name:\"content\",placeholder:\"Take a note...\",rows:typing?\"3\":\"1\",value:note.content}),/*#__PURE__*/React.createElement(Zoom,{in:typing},/*#__PURE__*/React.createElement(Fab,{onClick:function onClick(event){// passing our note to parent component via a prop function\n// also resetting both fields and avoid a default page refresh\nprops.onAdd(note);setNote({title:\"\",content:\"\"});event.preventDefault();}},/*#__PURE__*/React.createElement(AddIcon,null)))));}export default CreateArea;","map":{"version":3,"sources":["C:/Users/SamDavisJr/Desktop/Web Development/React/Keeper-WebApp/src/components/CreateArea.jsx"],"names":["React","useState","AddIcon","Fab","Zoom","CreateArea","props","title","content","note","setNote","typing","setTyping","showTitle","handleChange","event","target","name","value","prevValue","onAdd","preventDefault"],"mappings":"okBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,CACA,MAAOC,CAAAA,GAAP,KAAgB,uBAAhB,CACA,MAAOC,CAAAA,IAAP,KAAiB,wBAAjB,CAEA,QAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,CACzB;AACA;AACA,cAAwBL,QAAQ,CAAC,CAAEM,KAAK,CAAE,EAAT,CAAaC,OAAO,CAAE,EAAtB,CAAD,CAAhC,wCAAOC,IAAP,eAAaC,OAAb,eAEA;AACA,eAA4BT,QAAQ,CAAC,KAAD,CAApC,yCAAOU,MAAP,eAAeC,SAAf,eAEA;AACA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,mBACE,6BACE,QAAQ,CAAEC,YADZ,CAEE,IAAI,CAAC,OAFP,CAGE,WAAW,CAAC,OAHd,CAIE,KAAK,CAAEL,IAAI,CAACF,KAJd,EADF,CAQD,CATD,CAWA;AACA,GAAMO,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9B;AACA;AACA,kBAAwBA,KAAK,CAACC,MAA9B,CAAQC,IAAR,eAAQA,IAAR,CAAcC,KAAd,eAAcA,KAAd,CAEA;AACA;AACA;AACAR,OAAO,CAAC,SAACS,SAAD,CAAe,CACrB,sCACKA,SADL,wBAEGF,IAFH,CAEUC,KAFV,GAID,CALM,CAAP,CAMD,CAdD,CAgBA,mBACE,4CACE,4BAAM,SAAS,CAAC,aAAhB,EACGP,MAAM,CAAGE,SAAS,EAAZ,CAAiB,IAD1B,cAEE,gCACE,OAAO,CAAE,kBAAM,CACb;AACAD,SAAS,CAAC,IAAD,CAAT,CACD,CAJH,CAKE,QAAQ,CAAEE,YALZ,CAME,IAAI,CAAC,SANP,CAOE,WAAW,CAAC,gBAPd,CAQE,IAAI,CAAEH,MAAM,CAAG,GAAH,CAAS,GARvB,CASE,KAAK,CAAEF,IAAI,CAACD,OATd,EAFF,cAcE,oBAAC,IAAD,EAAM,EAAE,CAAEG,MAAV,eACE,oBAAC,GAAD,EACE,OAAO,CAAE,iBAACI,KAAD,CAAW,CAClB;AACA;AACAT,KAAK,CAACc,KAAN,CAAYX,IAAZ,EACAC,OAAO,CAAC,CAAEH,KAAK,CAAE,EAAT,CAAaC,OAAO,CAAE,EAAtB,CAAD,CAAP,CACAO,KAAK,CAACM,cAAN,GACD,CAPH,eASE,oBAAC,OAAD,MATF,CADF,CAdF,CADF,CADF,CAgCD,CAED,cAAehB,CAAAA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\nfunction CreateArea(props) {\n  // useState returns two things in an array:\n  // the state and a function to setState\n  const [note, setNote] = useState({ title: \"\", content: \"\" });\n\n  //tracking the state of typing in the text content for UX rendering\n  const [typing, setTyping] = useState(false);\n\n  // function to display title field, will only be called if the user is typing a content\n  const showTitle = () => {\n    return (\n      <input\n        onChange={handleChange}\n        name=\"title\"\n        placeholder=\"Title\"\n        value={note.title}\n      />\n    );\n  };\n\n  // function to handle change event in input and textarea fields\n  const handleChange = (event) => {\n    // get the name and new value by destructuring\n    // the element that triggered the event\n    const { name, value } = event.target;\n\n    // use the setNote state function to update\n    // the note object. Spread operator is used to get\n    // previous object content and we update based on name of event\n    setNote((prevValue) => {\n      return {\n        ...prevValue,\n        [name]: value,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <form className=\"create-note\">\n        {typing ? showTitle() : null}\n        <textarea\n          onClick={() => {\n            // setting typing flag to true when text area gets clicked\n            setTyping(true);\n          }}\n          onChange={handleChange}\n          name=\"content\"\n          placeholder=\"Take a note...\"\n          rows={typing ? \"3\" : \"1\"}\n          value={note.content}\n        />\n\n        <Zoom in={typing}>\n          <Fab\n            onClick={(event) => {\n              // passing our note to parent component via a prop function\n              // also resetting both fields and avoid a default page refresh\n              props.onAdd(note);\n              setNote({ title: \"\", content: \"\" });\n              event.preventDefault();\n            }}\n          >\n            <AddIcon />\n          </Fab>\n        </Zoom>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n"]},"metadata":{},"sourceType":"module"}