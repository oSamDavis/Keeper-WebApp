{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\keeper-part-3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\keeper-part-3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\keeper-part-3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\SamDavisJr\\\\Desktop\\\\Web Development\\\\React\\\\keeper-part-3\\\\src\\\\components\\\\CreateArea.jsx\";\nimport React, { useState } from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\nfunction CreateArea(props) {\n  var _this = this;\n\n  // useState returns two things in an array:\n  // the state and a function to setState\n  var _useState = useState({\n    title: \"\",\n    content: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      note = _useState2[0],\n      setNote = _useState2[1]; //tracking the state of typing in the text content for UX rendering\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      typing = _useState4[0],\n      setTyping = _useState4[1]; // function to display title field, will only be called if the user is typing a content\n\n\n  var showTitle = function showTitle() {\n    return /*#__PURE__*/React.createElement(\"input\", {\n      onChange: handleChange,\n      name: \"title\",\n      placeholder: \"Title\",\n      value: note.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    });\n  }; // function to handle change event in input and textarea fields\n\n\n  var handleChange = function handleChange(event) {\n    // get the name and new value by destructuring\n    // the element that triggered the event\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value; // use the setNote state function to update\n    // the note object. Spread operator is used to get\n    // previous object content and we update based on name of event\n\n    setNote(function (prevValue) {\n      return _objectSpread(_objectSpread({}, prevValue), {}, _defineProperty({}, name, value));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: \"create-note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, typing ? showTitle() : null, /*#__PURE__*/React.createElement(\"textarea\", {\n    onClick: function onClick() {\n      // setting typing flag to true when text area gets clicked\n      setTyping(true);\n    },\n    onChange: handleChange,\n    name: \"content\",\n    placeholder: \"Take a note...\",\n    rows: \"3\",\n    value: note.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Zoom, {\n    in: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Fab, {\n    onClick: function onClick(event) {\n      // passing our note to parent component via a prop function\n      // also resetting both fields and avoid a default page refresh\n      props.onAdd(note);\n      setNote({\n        title: \"\",\n        content: \"\"\n      });\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  })))));\n}\n\nexport default CreateArea;","map":{"version":3,"sources":["C:/Users/SamDavisJr/Desktop/Web Development/React/keeper-part-3/src/components/CreateArea.jsx"],"names":["React","useState","AddIcon","Fab","Zoom","CreateArea","props","title","content","note","setNote","typing","setTyping","showTitle","handleChange","event","target","name","value","prevValue","onAdd","preventDefault"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB;AACA;AACA,kBAAwBL,QAAQ,CAAC;AAAEM,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,OAAO,EAAE;AAAtB,GAAD,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb,iBAHyB,CAKzB;;;AACA,mBAA4BT,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAeC,SAAf,iBANyB,CAQzB;;;AACA,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,wBACE;AACE,MAAA,QAAQ,EAAEC,YADZ;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,WAAW,EAAC,OAHd;AAIE,MAAA,KAAK,EAAEL,IAAI,CAACF,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GATD,CATyB,CAoBzB;;;AACA,MAAMO,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B;AACA;AACA,wBAAwBA,KAAK,CAACC,MAA9B;AAAA,QAAQC,IAAR,iBAAQA,IAAR;AAAA,QAAcC,KAAd,iBAAcA,KAAd,CAH8B,CAK9B;AACA;AACA;;AACAR,IAAAA,OAAO,CAAC,UAACS,SAAD,EAAe;AACrB,6CACKA,SADL,2BAEGF,IAFH,EAEUC,KAFV;AAID,KALM,CAAP;AAMD,GAdD;;AAgBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,MAAM,GAAGE,SAAS,EAAZ,GAAiB,IAD1B,eAEE;AACE,IAAA,OAAO,EAAE,mBAAM;AACb;AACAD,MAAAA,SAAS,CAAC,IAAD,CAAT;AACD,KAJH;AAKE,IAAA,QAAQ,EAAEE,YALZ;AAME,IAAA,IAAI,EAAC,SANP;AAOE,IAAA,WAAW,EAAC,gBAPd;AAQE,IAAA,IAAI,EAAC,GARP;AASE,IAAA,KAAK,EAAEL,IAAI,CAACD,OATd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAcE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AACE,IAAA,OAAO,EAAE,iBAACO,KAAD,EAAW;AAClB;AACA;AACAT,MAAAA,KAAK,CAACc,KAAN,CAAYX,IAAZ;AACAC,MAAAA,OAAO,CAAC;AAAEH,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,OAAO,EAAE;AAAtB,OAAD,CAAP;AACAO,MAAAA,KAAK,CAACM,cAAN;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF,CAdF,CADF,CADF;AAgCD;;AAED,eAAehB,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\nfunction CreateArea(props) {\n  // useState returns two things in an array:\n  // the state and a function to setState\n  const [note, setNote] = useState({ title: \"\", content: \"\" });\n\n  //tracking the state of typing in the text content for UX rendering\n  const [typing, setTyping] = useState(false);\n\n  // function to display title field, will only be called if the user is typing a content\n  const showTitle = () => {\n    return (\n      <input\n        onChange={handleChange}\n        name=\"title\"\n        placeholder=\"Title\"\n        value={note.title}\n      />\n    );\n  };\n\n  // function to handle change event in input and textarea fields\n  const handleChange = (event) => {\n    // get the name and new value by destructuring\n    // the element that triggered the event\n    const { name, value } = event.target;\n\n    // use the setNote state function to update\n    // the note object. Spread operator is used to get\n    // previous object content and we update based on name of event\n    setNote((prevValue) => {\n      return {\n        ...prevValue,\n        [name]: value,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <form className=\"create-note\">\n        {typing ? showTitle() : null}\n        <textarea\n          onClick={() => {\n            // setting typing flag to true when text area gets clicked\n            setTyping(true);\n          }}\n          onChange={handleChange}\n          name=\"content\"\n          placeholder=\"Take a note...\"\n          rows=\"3\"\n          value={note.content}\n        />\n\n        <Zoom in={true}>\n          <Fab\n            onClick={(event) => {\n              // passing our note to parent component via a prop function\n              // also resetting both fields and avoid a default page refresh\n              props.onAdd(note);\n              setNote({ title: \"\", content: \"\" });\n              event.preventDefault();\n            }}\n          >\n            <AddIcon />\n          </Fab>\n        </Zoom>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n"]},"metadata":{},"sourceType":"module"}