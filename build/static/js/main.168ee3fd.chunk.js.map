{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","className","title","content","onClick","onDelete","id","CreateArea","useState","note","setNote","typing","setTyping","handleChange","event","target","name","value","prevValue","onChange","placeholder","rows","Zoom","in","Fab","onAdd","preventDefault","App","list","setList","deleteNote","filter","element","index","map","noteItem","key","ReactDOM","render","document","getElementById"],"mappings":"uPAaeA,MAVf,WACE,OACE,gCACE,4BACE,kBAAC,IAAD,MADF,aCKSC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,gCACE,+CAAgBF,K,iBCaPG,MAhBf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BACEC,QAAS,WACPJ,EAAMK,SAASL,EAAMM,MAGvB,kBAAC,IAAD,S,iDC+DOC,MAvEf,SAAoBP,GAGlB,MAAwBQ,mBAAS,CAAEN,MAAO,GAAIC,QAAS,KAAvD,mBAAOM,EAAP,KAAaC,EAAb,KAGA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAeMC,EAAe,SAACC,GAGpB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAKdP,GAAQ,SAACQ,GACP,OAAO,2BACFA,GADL,kBAEGF,EAAOC,QAKd,OACE,6BACE,0BAAMhB,UAAU,eACbU,EA7BH,2BACEQ,SAAUN,EACVG,KAAK,QACLI,YAAY,QACZH,MAAOR,EAAKP,QAyBY,KACxB,8BACEE,QAAS,WAEPQ,GAAU,IAEZO,SAAUN,EACVG,KAAK,UACLI,YAAY,iBACZC,KAAMV,EAAS,IAAM,IACrBM,MAAOR,EAAKN,UAGd,kBAACmB,EAAA,EAAD,CAAMC,GAAIZ,GACR,kBAACa,EAAA,EAAD,CACEpB,QAAS,SAACU,GAGRd,EAAMyB,MAAMhB,GACZC,EAAQ,CAAER,MAAO,GAAIC,QAAS,KAC9BW,EAAMY,mBAGR,kBAAC,IAAD,WCdGC,MAhDf,WAIE,MAAwBnB,mBAAS,IAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KAYMC,EAAa,SAACxB,GAClBuB,GAAQ,SAACX,GACP,OAAOA,EAAUa,QAAO,SAACC,EAASC,GAChC,OAAOA,IAAU3B,SAkBvB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYmB,MAhCA,SAAChB,GACfoB,GAAQ,SAACX,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsBT,UA+BrBmB,EAAKM,KAhBS,SAACC,EAAUF,GAC5B,OACE,kBAAC,EAAD,CACE5B,SAAUyB,EACVM,IAAKH,EACL3B,GAAI2B,EACJ/B,MAAOiC,EAASjC,MAChBC,QAASgC,EAAShC,aAWpB,kBAAC,EAAD,QC7CNkC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.168ee3fd.chunk.js","sourcesContent":["import React from \"react\";\nimport NotesIcon from \"@material-ui/icons/Notes\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>\n        <NotesIcon /> Keeper\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  const year = new Date().getFullYear();\n  return (\n    <footer>\n      <p>Copyright â“’ {year}</p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nfunction Note(props) {\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button\n        onClick={() => {\n          props.onDelete(props.id);\n        }}\n      >\n        <DeleteIcon />\n      </button>\n    </div>\n  );\n}\n\nexport default Note;\n","import React, { useState } from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Zoom from \"@material-ui/core/Zoom\";\n\nfunction CreateArea(props) {\n  // useState returns two things in an array:\n  // the state and a function to setState\n  const [note, setNote] = useState({ title: \"\", content: \"\" });\n\n  //tracking the state of typing in the text content for UX rendering\n  const [typing, setTyping] = useState(false);\n\n  // function to display title field, will only be called if the user is typing a content\n  const showTitle = () => {\n    return (\n      <input\n        onChange={handleChange}\n        name=\"title\"\n        placeholder=\"Title\"\n        value={note.title}\n      />\n    );\n  };\n\n  // function to handle change event in input and textarea fields\n  const handleChange = (event) => {\n    // get the name and new value by destructuring\n    // the element that triggered the event\n    const { name, value } = event.target;\n\n    // use the setNote state function to update\n    // the note object. Spread operator is used to get\n    // previous object content and we update based on name of event\n    setNote((prevValue) => {\n      return {\n        ...prevValue,\n        [name]: value,\n      };\n    });\n  };\n\n  return (\n    <div>\n      <form className=\"create-note\">\n        {typing ? showTitle() : null}\n        <textarea\n          onClick={() => {\n            // setting typing flag to true when text area gets clicked\n            setTyping(true);\n          }}\n          onChange={handleChange}\n          name=\"content\"\n          placeholder=\"Take a note...\"\n          rows={typing ? \"3\" : \"1\"}\n          value={note.content}\n        />\n\n        <Zoom in={typing}>\n          <Fab\n            onClick={(event) => {\n              // passing our note to parent component via a prop function\n              // also resetting both fields and avoid a default page refresh\n              props.onAdd(note);\n              setNote({ title: \"\", content: \"\" });\n              event.preventDefault();\n            }}\n          >\n            <AddIcon />\n          </Fab>\n        </Zoom>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateArea;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n  // the useState hook for updating the list of notes on UI\n  // useState() takes in initial state as parameter\n  // returns an array containing the state and a setState function\n  const [list, setList] = useState([]);\n\n  // function addNote that adds a created note to list of notes\n  // takes in a note from the createArea component\n  const addNote = (note) => {\n    setList((prevValue) => {\n      return [...prevValue, note];\n    });\n  };\n\n  // function deleteNote deletes a note from list of notes\n  // takes in the note's id\n  const deleteNote = (id) => {\n    setList((prevValue) => {\n      return prevValue.filter((element, index) => {\n        return index !== id;\n      });\n    });\n  };\n\n  // function to create a single Note component\n  const createNote = (noteItem, index) => {\n    return (\n      <Note\n        onDelete={deleteNote}\n        key={index}\n        id={index}\n        title={noteItem.title}\n        content={noteItem.content}\n      />\n    );\n  };\n\n  return (\n    <div>\n      <Header />\n      <CreateArea onAdd={addNote} />\n      {list.map(createNote)}\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}